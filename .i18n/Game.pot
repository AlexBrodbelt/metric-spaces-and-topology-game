msgid ""
msgstr "Project-Id-Version: Game v4.6.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Wed Jun  5 14:40:14 2024\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: Game.Levels.MetricWorld.L01_TriIneq
msgid "Triangle inequality"
msgstr ""

#: Game.Levels.MetricWorld.L01_TriIneq
msgid "# Transitioning to metric spaces\n"
"When proving many theorems about limits in real analysis,\n"
"the triangle inequality is the biggest ingredient.\n"
"In the theory of metric spaces, we will aim to generalise some of these concepts in real\n"
"analysis to things other than the real numbers $\mathbb{R}$\n"
"(such as $\mathbb{R}^2$ or even geometric shapes...).\n"
"When we make the jump to the wider setting, we will assume our space $X$\n"
"has an associated function $d \colon X \times X \to \mathbb{R}_{\geq0}$ where $d(x,y)$\n"
"will represent the 'distance' between\n"
"$x, y \in X$ (in place of how $|x-y|$ is used to measure distances in $\mathbb{R}$).\n"
"To behave like we expect distances should, our distance function $d$ must satisfy 2 conditions\n"
"which will be part of the metric space axioms:\n"
"- $d(x,y) = 0 \iff x=y$\n"
"- $d(x,y) = d(y,x)$\n"
"- $d(x,z) \leq d(x,y) + d(y,z)$ *(the triangle inequality)*\n"
"\n"
"# Task:\n"
"Now, to remind ourself about the power of the triangle inequality, let's show it's equivalent\n"
"to the reverse triangle inequality (another tool in real analysis) assuming very little about\n"
"what the absolute value of real numbers actually is."
msgstr ""

#: Game.Levels.MetricWorld.L01_TriIneq
msgid "To prove iff statements, use `constructor` to reduce to proving each direction"
msgstr ""

#: Game.Levels.MetricWorld.L01_TriIneq
msgid "With what values can you `specialize` the triangle inequality to prove the claim?"
msgstr ""

#: Game.Levels.MetricWorld.L01_TriIneq
msgid "To simplify your hypothesis into the goal, you may like to use tactics `ring_nf` or `rw` with theorems in tab to the right."
msgstr ""

#: Game.Levels.MetricWorld.L01_TriIneq
msgid "The `linarith` tactic is pretty good in these situations"
msgstr ""

#: Game.Levels.MetricWorld.L01_TriIneq
msgid "The `linarith` tactic is pretty good in these situations"
msgstr ""

#: Game.Levels.MetricWorld.L01_TriIneq
msgid "Look at the right panel to find useful theorems to rewrite your hypothesis"
msgstr ""

#: Game.Levels.MetricWorld.L01_TriIneq
msgid "The triangle inequality is a key part of many proofs around limits in Real analysis"
msgstr ""

#: Game.Levels.MetricWorld.L02_ClosedBallClosed
msgid "Proving the closed ball is closed"
msgstr ""

#: Game.Levels.MetricWorld.L02_ClosedBallClosed
msgid "# Transitioning to metric spaces\n"
"An important property of a set in a metric space is openness, admittedly it is not obvious why this is an interesting property to study\n"
"but eventually it will be closely related to convergence of sequences, continuity, sequential compactness, compactness and so forth.\n"
"\n"
"# Task:\n"
"\n"
"Your task is to prove that the closed ball is closed.\n"
"To show $S$ is open, we must show that for an arbitrary element $ y \in S,\n"
"there exists a radius $r(y)$ depending (or not) on $y$ such that\n"
"$B(y, r(y)) \subseteq S$"
msgstr ""

#: Game.Levels.MetricWorld.L02_ClosedBallClosed
msgid "A set $S$ is open iff ∀ a ∈ S ∃ ε > 0 such that Ball a ε ⊆ S"
msgstr ""

#: Game.Levels.MetricWorld.L02_ClosedBallClosed
msgid "try `dsimp at h` to definitionally simplify the hypothesis which states a is in S, it looks a bit unwieldy otherwise..."
msgstr ""

#: Game.Levels.MetricWorld.L02_ClosedBallClosed
msgid "what choice of ε can you provide such that ball a ε ⊆ S ? There are many possible choices, but if you are confident try your pick, otherwise I suggest using '(dist a c - r) / 2'"
msgstr ""

#: Game.Levels.MetricWorld.L02_ClosedBallClosed
msgid "Now we have to prove that if b ∈ ball a ε then b ∈ S"
msgstr ""

#: Game.Levels.MetricWorld.L02_ClosedBallClosed
msgid "unfold the definition of b ∈ ball"
msgstr ""

#: Game.Levels.MetricWorld.L02_ClosedBallClosed
msgid "You have proved S is open! Well done!"
msgstr ""

#: Game.Levels.MetricWorld.L02_ClosedBallClosed
msgid ""
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid "Topology exercise"
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid "Topology intro"
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid "To prove to sets are equal we use the axiom of extensionality `ext`, two sets $A$ and $B$ are equal if and only they have the same members"
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid "To prove iff statements, use `constructor` to reduce to proving each direction"
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid "Introduce the assumption into the local context by `intro`"
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid "To prove by contradiction we use the tactic `by_contra h` where `h` takes the goal as a new assumption."
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid "When we have to contradicting hypotheses we can use `absurd`"
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid "Because a ∖ b = a ∩ bᶜ, if x ∈ a ∖ b then x ∈ a ∩ bᶜ. By definition, if x ∈ s ∩ t then x ∈ s and x ∈ t.\n"
"either use `rcases x_in_s_inter_t with ⟨x_in_s, x_in_t⟩` to split the "
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid "Set difference is implicitly an intersection:  x ∈ a  b ↔ x ∈ a  and x ∈ bᶜ"
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid "One of De Morgan's Laws states ¬ (A ∧ B) ↔ (¬ A) ∨ (¬ B)... This might get you somewhere (´not_and_or` is the name this law has in Mathlib)"
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid "one can split an ∨ with `rcases` to create two hopefully easier subgoals"
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid "`absurd` proves a goal given ´p´ and ´¬ p´ (in that order) "
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid "This theorem can be found in Mathlib as `self_diff_frontier`"
msgstr ""

#: Game.Levels.MetricWorld.L03_IntEqSelfDiffFrontier
msgid ""
msgstr ""

#: Game.Levels.MetricWorld.L04_LimitDfn
msgid "Topology exercise"
msgstr ""

#: Game.Levels.MetricWorld.L04_LimitDfn
msgid "Topology intro"
msgstr ""

#: Game.Levels.MetricWorld.L04_LimitDfn
msgid "some hint here"
msgstr ""

#: Game.Levels.MetricWorld.L04_LimitDfn
msgid "This last message appears if the level is solved."
msgstr ""

#: Game.Levels.MetricWorld
msgid "Metric World"
msgstr ""

#: Game.Levels.MetricWorld
msgid "\n"
"This introduction is shown before one enters level 1 of the demo world. Use markdown.\n"
""
msgstr ""

#: Game.Levels.HammingWorld.L01_HammingDist
msgid "Hamming distance"
msgstr ""

#: Game.Levels.HammingWorld
msgid "Hamming World"
msgstr ""

#: Game.Levels.HammingWorld
msgid "\n"
"This is a world where we study the Hamming Distance and play around with interesting properties it has\n"
""
msgstr ""

#: Game.Levels.TopologyWorld.L01_OpenClosedUnderUnion
msgid "Topology of a metric space is closed under arbitrary union of elements in the topology - the arbitrary union of open sets is itself an open set"
msgstr ""

#: Game.Levels.TopologyWorld.L01_OpenClosedUnderUnion
msgid "Topology intro"
msgstr ""

#: Game.Levels.TopologyWorld.L01_OpenClosedUnderUnion
msgid "expanding the definion of 'IsOpen' using 'rw [Metric.isOpen_iff]' is a good place to start"
msgstr ""

#: Game.Levels.TopologyWorld.L01_OpenClosedUnderUnion
msgid "if $x$ belongs to the union then it must lie in one of the sets 'S j' for some $j \in ι$"
msgstr ""

#: Game.Levels.TopologyWorld.L01_OpenClosedUnderUnion
msgid "use ´rcases´ to instantiate the set $s j$ to which $x$ belongs to"
msgstr ""

#: Game.Levels.TopologyWorld.L01_OpenClosedUnderUnion
msgid "We need to prove Metric.ball x ε ⊆ s j ⊆ ⋃ i, s i - Can you do this ?"
msgstr ""

#: Game.Levels.TopologyWorld.L01_OpenClosedUnderUnion
msgid "We go 'backwards' s j ⊆ ⋃ i, s i  - by using ´ apply subset_iUnion s j´. Observe we give ´s´ and ´j´ as parameters for the theorem"
msgstr ""

#: Game.Levels.TopologyWorld.L02_OpenClosedUnderIntersection
msgid "Topology is closed under pairwise intersection"
msgstr ""

#: Game.Levels.TopologyWorld.L02_OpenClosedUnderIntersection
msgid "Topology intro"
msgstr ""

#: Game.Levels.TopologyWorld.L02_OpenClosedUnderIntersection
msgid "´rintro´ alongside with the anonymous constructor ´⟨ ⟩´ is very useful in destructuring the assumptions"
msgstr ""

#: Game.Levels.TopologyWorld.L03_Continuity_PreimageOpenIsOpen
msgid "The preimage of an open set for a given continuous map is again an open set"
msgstr ""

#: Game.Levels.TopologyWorld.L03_Continuity_PreimageOpenIsOpen
msgid "Topology intro"
msgstr ""

#: Game.Levels.TopologyWorld.L04_PreimageOpenIsOpen_Continuity
msgid ""
msgstr ""

#: Game.Levels.TopologyWorld.L04_PreimageOpenIsOpen_Continuity
msgid "Topology intro"
msgstr ""

#: Game.Levels.TopologyWorld.L05_ConvergingSeqInClosedSet
msgid "Converging sequence converges to element in the closure of the set"
msgstr ""

#: Game.Levels.TopologyWorld.L05_ConvergingSeqInClosedSet
msgid "Topology intro"
msgstr ""

#: Game.Levels.TopologyWorld
msgid "Topology World"
msgstr ""

#: Game.Levels.TopologyWorld
msgid "\n"
"This introduction is shown before one enters level 1 of the demo world. Use markdown.\n"
""
msgstr ""

#: Game
msgid "Hello World Game"
msgstr ""

#: Game
msgid "\n"
"This text appears on the starting page where one selects the world/level to play.\n"
"You can use markdown.\n"
""
msgstr ""

#: Game
msgid "\n"
"Here you can put additional information about the game. It is accessible\n"
"from the starting through the drop-down menu.\n"
"\n"
"For example: Game version, Credits, Link to Github and Zulip, etc.\n"
"\n"
"Use markdown.\n"
""
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "You should use this game as a template for your own game and add your own levels."
msgstr ""
